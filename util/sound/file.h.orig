#ifndef WVLX_UTIL_SOUND_FILE_H
#define WVLX_UTIL_SOUND_FILE_H
#include <memory>
#include <string>
#include <vector>
#include <sndfile.h>

#include "util/logging.h"
#include "util/status.h"
#include "util/statusor.h"
#include "absl/memory/memory.h"

namespace sound {

enum class Interpolation {
    None = 0,
    Linear = 1,
};

template<typename T>
class Channel {
  public:
    Channel(const T* data, size_t samples, double rate, size_t stride=1)
      : interp_(Interpolation::Linear),
      rate_(rate),
      length_(samples / rate) {
        data_.reserve(samples);
        for(size_t i=0; i<samples; ++i) {
            data_.emplace_back(*data);
            data += stride;
        }
    }

    T at(double tm) {
        if (tm < 0.0 || tm >= length_) return 0.0;
        double n = tm / rate_;
        switch(interp_) {
            case Interpolation::None: {
                return data_.at(int(n));
            }; break;
            case Interpolation::Linear: {
                double f = n - floor(n);
                T sa = sample(n), sb = sample(n+1);
                return sa * (1.0 - f) + sb * f;
            }; break;
        }
    }
    T sample(size_t index) {
        return index < data_.size() ? data_.at(index) : 0.0;
    }
    const T* data() { return data_.data(); }
    size_t size() { return data_.size(); }
    double rate() { return rate_; }
    double length() { return length_; }

  private:
    std::vector<T> data_;
    Interpolation interp_;
    double rate_;
    double length_;
};

namespace internal {
template<typename T>
size_t read(SNDFILE* sf, T* ptr, size_t n);

template<>
size_t read<float>(SNDFILE* sf, float* ptr, size_t n) {
        return sf_read_float(sf, ptr, n); }

template<>
size_t read<double>(SNDFILE* sf, double* ptr, size_t n) {
        return sf_read_double(sf, ptr, n); }
}  // namespace internal


template <typename T>
class File {
  public:
    File() = default;
    static std::unique_ptr<File<T>> Load(const std::string& filename) {
        SF_INFO info;
        SNDFILE* fp = sf_open(filename.c_str(), SFM_READ, &info);
        if (fp == nullptr) {
            LOGF(ERROR, "File::Load could not open %s: %s",
                 filename.c_str(), sf_strerror(fp));
            return nullptr;
        }
        auto data = SFRead(fp, &info);
        sf_close(fp);

        auto file = absl::make_unique<File<T>>();
        file->info_ = info;
        for(int i=0; i<info.channels; i++) {
            file->channel_.emplace_back(new Channel<T>(data.data()+i,
                                                       info.frames,
                                                       info.samplerate,
                                                       info.channels));
        }
        return file;
    }

    size_t channels() { return channel_.size(); }
    const Channel<T>* channel(size_t i) { return channel_.at(i).get(); }
    const SF_INFO& info() { return info_; }
  private:
    static std::vector<T> SFRead(SNDFILE* sf, SF_INFO* info) {
        std::vector<T> data(info->frames * info->channels);
        size_t count = internal::read(sf, data.data(), data.size());
        if (count != data.size()) {
            LOGF(ERROR, "SFRead short read: got %z, expected %z",
                 count, data.size());
        }
        return data;
    }
    std::vector<std::shared_ptr<Channel<T>>> channel_;
    SF_INFO info_;
};

}  // namespace
#endif // WVLX_UTIL_SOUND_FILE_H
